# Generated by Django 4.2.7 on 2025-07-24 07:15

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('question_type', models.CharField(choices=[('coding', 'Coding'), ('multiple_choice', 'Multiple Choice'), ('text', 'Text/Essay'), ('system_design', 'System Design'), ('behavioral', 'Behavioral')], max_length=20)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('expert', 'Expert')], max_length=10)),
                ('time_limit', models.IntegerField(blank=True, help_text='Time limit in minutes', null=True)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('skills_assessed', models.JSONField(blank=True, default=list)),
                ('question_data', models.JSONField(default=dict, help_text='Question-specific configuration')),
                ('max_score', models.IntegerField(default=100)),
                ('auto_grade', models.BooleanField(default=True)),
                ('grading_criteria', models.JSONField(blank=True, default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=False)),
                ('times_used', models.IntegerField(default=0)),
                ('average_score', models.FloatField(blank=True, null=True)),
                ('average_completion_time', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'questions',
            },
        ),
        migrations.CreateModel(
            name='QuestionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(default='#007bff', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'question_categories',
            },
        ),
        migrations.CreateModel(
            name='QuestionSet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('total_time_limit', models.IntegerField(blank=True, null=True)),
                ('randomize_questions', models.BooleanField(default=False)),
                ('max_questions', models.IntegerField(blank=True, null=True)),
                ('times_used', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_question_sets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'question_sets',
            },
        ),
        migrations.CreateModel(
            name='QuestionSetItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField()),
                ('is_required', models.BooleanField(default=True)),
                ('weight', models.FloatField(default=1.0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='questions.question')),
                ('question_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='questions.questionset')),
            ],
            options={
                'db_table': 'question_set_items',
                'ordering': ['order'],
                'unique_together': {('question_set', 'question')},
            },
        ),
        migrations.AddField(
            model_name='questionset',
            name='questions',
            field=models.ManyToManyField(through='questions.QuestionSetItem', to='questions.question'),
        ),
        migrations.AddField(
            model_name='question',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='questions.questioncategory'),
        ),
        migrations.AddField(
            model_name='question',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_questions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='MultipleChoiceQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('options', models.JSONField(default=list)),
                ('allow_multiple', models.BooleanField(default=False)),
                ('randomize_options', models.BooleanField(default=True)),
                ('explanation', models.TextField(blank=True)),
                ('explanation_media', models.FileField(blank=True, null=True, upload_to='question_explanations/')),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='mcq_data', to='questions.question')),
            ],
            options={
                'db_table': 'multiple_choice_questions',
            },
        ),
        migrations.CreateModel(
            name='CodingQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allowed_languages', models.JSONField(default=list)),
                ('default_language', models.CharField(default='python', max_length=20)),
                ('starter_code', models.JSONField(default=dict)),
                ('solution_code', models.JSONField(default=dict)),
                ('test_cases', models.JSONField(default=list)),
                ('hidden_test_cases', models.JSONField(default=list)),
                ('memory_limit', models.IntegerField(default=256)),
                ('execution_time_limit', models.IntegerField(default=10)),
                ('expected_complexity', models.CharField(blank=True, max_length=100)),
                ('keywords_required', models.JSONField(default=list)),
                ('keywords_forbidden', models.JSONField(default=list)),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='coding_data', to='questions.question')),
            ],
            options={
                'db_table': 'coding_questions',
            },
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['question_type'], name='questions_questio_8af709_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['difficulty'], name='questions_difficu_8150ad_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['is_active'], name='questions_is_acti_ba6b3c_idx'),
        ),
    ]
