# Generated by Django 4.2.7 on 2025-07-24 06:32

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
                ('domain', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='tenant_logos/')),
                ('description', models.TextField(blank=True)),
                ('plan', models.CharField(choices=[('free', 'Free'), ('basic', 'Basic'), ('premium', 'Premium'), ('enterprise', 'Enterprise')], default='free', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('allow_public_signup', models.BooleanField(default=False)),
                ('max_interviews', models.IntegerField(default=10)),
                ('max_questions', models.IntegerField(default=50)),
                ('max_candidates', models.IntegerField(default=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'tenants',
            },
        ),
        migrations.CreateModel(
            name='TenantSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary_color', models.CharField(default='#007bff', max_length=7)),
                ('secondary_color', models.CharField(default='#6c757d', max_length=7)),
                ('custom_css', models.TextField(blank=True)),
                ('from_email', models.EmailField(blank=True, max_length=254)),
                ('email_signature', models.TextField(blank=True)),
                ('default_interview_duration', models.IntegerField(default=60)),
                ('allow_code_execution', models.BooleanField(default=True)),
                ('require_webcam', models.BooleanField(default=False)),
                ('auto_submit_on_time_end', models.BooleanField(default=True)),
                ('enable_ai_grading', models.BooleanField(default=True)),
                ('ai_grading_model', models.CharField(default='gpt-3.5-turbo', max_length=50)),
                ('manual_review_threshold', models.FloatField(default=0.7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='tenants.tenant')),
            ],
            options={
                'db_table': 'tenant_settings',
            },
        ),
        migrations.CreateModel(
            name='TenantUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('recruiter', 'Recruiter'), ('interviewer', 'Interviewer'), ('viewer', 'Viewer')], default='recruiter', max_length=20)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='user_avatars/')),
                ('is_tenant_admin', models.BooleanField(default=False)),
                ('can_create_interviews', models.BooleanField(default=True)),
                ('can_manage_questions', models.BooleanField(default=True)),
                ('can_view_analytics', models.BooleanField(default=False)),
                ('can_manage_users', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='tenant_users', related_query_name='tenant_user', to='auth.group', verbose_name='groups')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='tenants.tenant')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='tenant_users', related_query_name='tenant_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'tenant_users',
                'unique_together': {('tenant', 'username')},
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
